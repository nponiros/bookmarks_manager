---
  ecmaFeatures:
    modules: true
    jsx: true
  env:
    browser: true
    es6: true
  rules:
    # Possible Errors
    comma-dangle: 1             # disallow or enforce trailing commas (recommended)
    no-cond-assign: 2           # disallow assignment in conditional expressions (recommended)
    no-constant-condition: 1    # disallow use of constant expressions in conditions (recommended)
    no-control-regex: 2         # disallow control characters in regular expressions (recommended)
    no-dupe-args: 2             # disallow duplicate arguments in functions (recommended)
    no-dupe-keys: 2             # disallow duplicate keys when creating object literals (recommended)
    no-duplicate-case: 2        # disallow a duplicate case label. (recommended)
    no-empty-character-class: 2 # disallow the use of empty character classes in regular expressions (recommended)
    no-empty: 1                 # disallow empty statements (recommended)
    no-ex-assign: 2             # disallow assigning to the exception in a catch block (recommended)
    no-extra-boolean-cast: 1    # disallow double-negation boolean casts in a boolean context (recommended)
    no-extra-parens: 1          # disallow unnecessary parentheses
    no-extra-semi: 2            # disallow unnecessary semicolons (recommended)
    no-func-assign: 2           # disallow overwriting functions written as function declarations (recommended)
    no-inner-declarations: 2    # disallow function or variable declarations in nested blocks (recommended)
    no-invalid-regexp: 2        # disallow invalid regular expression strings in the RegExp constructor (recommended)
    no-irregular-whitespace: 2  # disallow irregular whitespace outside of strings and comments (recommended)
    no-negated-in-lhs: 2        # disallow negation of the left operand of an in expression (recommended)
    no-obj-calls: 2             # disallow the use of object properties of the global object (Math and JSON) as functions (recommended)
    no-regex-spaces: 2          # disallow multiple spaces in a regular expression literal (recommended)
    no-sparse-arrays: 2         # disallow sparse arrays (recommended)
    no-unreachable: 2           # disallow unreachable statements after a return, throw, continue, or break statement (recommended)
    use-isnan: 2                # disallow comparisons with the value NaN (recommended)
    valid-jsdoc: 2              # Ensure JSDoc comments are valid
    valid-typeof: 2             # Ensure that the results of typeof are compared against a valid string (recommended)
    no-unexpected-multiline: 2  # Avoid code that looks like two expressions but is actually one
    # Best Practices
    consistent-return: 1        # require return statements to either always or never specify values
    curly: 2                    # specify curly brace conventions for all control statements
    default-case: 2             # require default case in switch statements
    dot-notation: 1             # encourages use of dot notation whenever possible
    eqeqeq: 2                   # require the use of === and !==
    guard-for-in: 2             # make sure for-in loops have an if statement
    no-caller: 2                # disallow use of arguments.caller or arguments.callee
    no-empty-label: 2           # disallow use of labels for anything other than loops and switches
    no-eq-null: 1               # disallow comparisons to null without a type-checking operator
    no-eval: 2                  # disallow use of eval()
    no-extend-native: 2         # disallow adding to native types
    no-extra-bind: 2            # disallow unnecessary function binding
    no-fallthrough: 1           # disallow fallthrough of case statements (recommended)
    no-floating-decimal: 2      # disallow the use of leading or trailing decimal points in numeric literals
    no-implicit-coercion: 2     # disallow the type conversions with shorter notations
    no-implied-eval: 2          # disallow use of eval()-like methods
    no-invalid-this: 1          # disallow this keywords outside of classes or class-like objects
    no-labels: 2                # disallow use of labeled statements
    no-lone-blocks: 2           # disallow unnecessary nested blocks
    no-loop-func: 2             # disallow creation of functions within loops
    no-multi-spaces: 2          # disallow use of multiple spaces
    no-multi-str: 2             # disallow use of multiline strings
    no-native-reassign: 2       # disallow reassignments of native objects
    no-new-func: 2              # disallow use of new operator for Function object
    no-new-wrappers: 2          # disallows creating new instances of String,Number, and Boolean
    no-new: 2                   # disallow use of the new operator when not part of an assignment or comparison
    no-octal: 2                 # disallow use of octal literals (recommended)
    no-proto: 2                 # disallow usage of __proto__ property
    no-redeclare: 2             # disallow declaring the same variable more than once (recommended)
    no-return-assign: 2         # disallow use of assignment in return statement
    no-script-url: 2            # disallow use of javascript: urls.
    no-sequences: 2             # disallow use of the comma operator
    no-throw-literal: 2         # restrict what can be thrown as an exception
    no-unused-expressions: 2    # disallow usage of expressions in statement position
    no-useless-call: 2          # disallow unnecessary .call() and .apply()
    no-void: 2                  # disallow use of the void operator
    no-with: 2                  # disallow use of the with statement
    radix: 2                    # require use of the second argument for parseInt()
    wrap-iife: 2                # require immediate function invocation to be wrapped in parentheses
    yoda: [2, "never"]          # require or disallow Yoda conditions
    # Variables
    no-delete-var: 2            # disallow deletion of variables (recommended)
    no-label-var: 2             # disallow labels that share a name with a variable
    no-shadow: 2                # disallow declaration of variables already declared in the outer scope
    no-undef: 2                 # disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
    no-unused-vars: 2           # disallow declaration of variables that are not used in the code (recommended)
    no-use-before-define: 2     # disallow use of variables before they are defined
    # Stylistic Issues
    array-bracket-spacing: 1    # enforce spacing inside array brackets
    brace-style: 1              # enforce one true brace style
    camelcase: 1                # require camel case names
    comma-spacing: 1            # enforce spacing before and after comma
    comma-style: 1              # enforce one true comma style
    computed-property-spacing: [1, "never"]   # require or disallow padding inside computed properties
    consistent-this: [1, "self"]              # enforce consistent naming when capturing the current execution context
    eol-last: 1                               # enforce newline at the end of file, with no multiple empty lines
    indent: [1, 2, {SwitchCase: 1}]           # specify tab or space width for your code
    key-spacing: 1              # enforce spacing between keys and values in object literal properties
    linebreak-style: 2          # disallow mixed 'LF' and 'CRLF' as linebreaks
    new-cap: 2                  # require a capital letter for constructors
    new-parens: 2               # disallow the omission of parentheses when invoking a constructor with no arguments
    no-array-constructor: 2     # disallow use of the Array constructor
    no-mixed-spaces-and-tabs: 2 # disallow mixed spaces and tabs for indentation (recommended)
    no-multiple-empty-lines: 1  # disallow multiple empty lines
    no-nested-ternary: 2        # disallow nested ternary expressions
    no-new-object: 2            # disallow the use of the Object constructor
    no-spaced-func: 1           # disallow space between function identifier and application
    no-trailing-spaces: 1       # disallow trailing whitespace at the end of lines
    no-unneeded-ternary: 1      # disallow the use of Boolean literals in conditional expressions
    object-curly-spacing: [1, "never"]        # require or disallow padding inside curly braces
    operator-linebreak: 1       # enforce operators to be placed before or after line breaks
    padded-blocks: [1, "never"] # enforce padding within blocks
    quotes: [1, "single"]       # specify whether backticks, double or single quotes should be used
    semi-spacing: 1             # enforce spacing before and after semicolons
    semi: 2                     # require or disallow use of semicolons instead of ASI
    space-after-keywords: 1     # require a space after certain keywords
    space-before-blocks: 1      # require or disallow a space before blocks
    space-before-function-paren: [1, "never"]  # require or disallow a space before function opening parenthesis
    space-in-parens: 1              # require or disallow spaces inside parentheses
    space-infix-ops: 1              # require spaces around operators
    space-return-throw-case: 1      # require a space after return, throw, and case
    space-unary-ops: 1              # require or disallow spaces before/after unary operators
    # ECMAScript 6
    arrow-parens: 1         # require parens in arrow function arguments
    arrow-spacing: 1        # require space before/after arrow function's arrow
    constructor-super: 2    # verify calls of super() in constructors
    no-class-assign: 2      #disallow modifying variables of class declarations
    no-const-assign: 2      # disallow modifying variables that are declared using const
    no-this-before-super: 2 # disallow use of this/super before calling super() in constructors.
    no-var: 1               # require let or const instead of var
    object-shorthand: 1     # require method and property shorthand syntax for object literals
    prefer-const: 1         # suggest using const declaration for variables that are never modified after declared
    prefer-spread: 1        # suggest using the spread operator instead of .apply().
  plugins: ["react"]
